{"metadata":{"orig_nbformat":4,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Lab 6. Data Assembly I","metadata":{}},{"cell_type":"markdown","source":"### So far we have taken for granted that the data we required to carry out our analysis was available to us in a convenient format (e.g. csv). That is usually not the case, data sources are scattered around the organization (or the internet) and require prior processing before the analysis can take place.\n\n### In this lab, and the following one, we will learn: (1) how to fetch external data using standard methods, (2) how to combine several datasets into a single one ready for analysis.","metadata":{}},{"cell_type":"markdown","source":"## This session will cover:\n\n1. Fetch data from external datasources using Application Programming Interfaces (API)\n2. Basic merging \n","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 1. Let's load and install some libraries","metadata":{}},{"cell_type":"markdown","source":"### 1.1. Open Air Quality Data (OpenAQ)\n\n\n#### Air pollution is the 4th largest risk factor to human health on the planet. According to the World Health Organization, more than 90% of the world breathes unhealthy air, and air pollution disproportionately affects those in developing countries.\n\n#### OpenAQ is a non-profit organization empowering communities around the globe to clean their air by harmonizing, sharing, and using open air quality data.\n####Â OpenAQ maintains a repository consisted of air quality data from 130 different countries and primarily aggregate PM2.5, PM10, ozone (O3), sulfur dioxide (SO2), nitrogen dioxide(NO2), carbon monoxide (CO), and black carbon (BC) measurements. Additional pollutants outside of those standard set of pollutants are now available through low cost sensor sources at certain locations.\n\n\n\n","metadata":{}},{"cell_type":"markdown","source":"### 1.2.OpenAQ API\n\n\n#### OPenAQ makes its data available online through an Application Programming Interface (API) that allows us to fetch the data.\n#### We need to install a library called py-openaq to be able to use the API","metadata":{}},{"cell_type":"code","source":"!pip install py-openaq","metadata":{"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Requirement already satisfied: py-openaq in /srv/conda/envs/notebook/lib/python3.7/site-packages (1.1.0)\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport seaborn as sns","metadata":{"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import openaq","metadata":{"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"import matplotlib as mpl\nimport matplotlib.pyplot as plt","metadata":{"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"pd.set_option('display.float_format', lambda x: '%.5f' % x)","metadata":{"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings('ignore')","metadata":{"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":"\n### 1.3 It is always a good idea to test the API first, just to make sure it is working","metadata":{}},{"cell_type":"code","source":"api = openaq.OpenAQ()\n\nstatus, resp = api.cities(limit=5)","metadata":{"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"status","metadata":{"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"200"},"metadata":{}}]},{"cell_type":"code","source":"resp","metadata":{"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"{'meta': {'name': 'openaq-api',\n  'license': 'CC BY 4.0d',\n  'website': 'https://u50g7n0cbj.execute-api.us-east-1.amazonaws.com/',\n  'page': 1,\n  'limit': 5,\n  'found': 2915,\n  'pages': 583},\n 'results': [{'country': 'US',\n   'name': '007',\n   'city': '007',\n   'count': 1372,\n   'locations': 5},\n  {'country': 'US',\n   'name': '019',\n   'city': '019',\n   'count': 704,\n   'locations': 1},\n  {'country': 'US',\n   'name': '037',\n   'city': '037',\n   'count': 2683,\n   'locations': 23},\n  {'country': 'US',\n   'name': '039',\n   'city': '039',\n   'count': 380,\n   'locations': 1},\n  {'country': 'US',\n   'name': '047',\n   'city': '047',\n   'count': 101,\n   'locations': 1}]}"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 1.4.  Let's make our second API call\n#### This time we want the data in pandas format","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cities = api.cities(df=True)\n","metadata":{"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"cities.head(3)","metadata":{"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"  country name city  count  locations\n0      US  007  007   1372          5\n1      US  019  019    704          1\n2      US  037  037   2683         23","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>name</th>\n      <th>city</th>\n      <th>count</th>\n      <th>locations</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>US</td>\n      <td>007</td>\n      <td>007</td>\n      <td>1372</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>US</td>\n      <td>019</td>\n      <td>019</td>\n      <td>704</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>US</td>\n      <td>037</td>\n      <td>037</td>\n      <td>2683</td>\n      <td>23</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### 1.4. Let's make our third API call\n#### Which countries are included in the database ?","metadata":{}},{"cell_type":"code","source":"countries = api.countries( df=True)","metadata":{"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"countries","metadata":{"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"    code             count  locations  cities                  name\n0     AD    93301027.00000          3       2               Andorra\n1     AE  5764752629.00000          5       3  United Arab Emirates\n2     AF    51956121.00000          2       2           Afghanistan\n3     AM  7459800876.00000          2       0               Armenia\n4     AO  3842638218.00000          2       0                Angola\n..   ...               ...        ...     ...                   ...\n125   UZ    66948148.00000          1       1            Uzbekistan\n126   VM    67509765.00000          2       1                    VM\n127   VN 22144692164.00000          9       2               Vietnam\n128   XK  4838155523.00000         16       8                Kosovo\n129   ZA 27292960529.00000         16       1          South Africa\n\n[130 rows x 5 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>code</th>\n      <th>count</th>\n      <th>locations</th>\n      <th>cities</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AD</td>\n      <td>93301027.00000</td>\n      <td>3</td>\n      <td>2</td>\n      <td>Andorra</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AE</td>\n      <td>5764752629.00000</td>\n      <td>5</td>\n      <td>3</td>\n      <td>United Arab Emirates</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AF</td>\n      <td>51956121.00000</td>\n      <td>2</td>\n      <td>2</td>\n      <td>Afghanistan</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AM</td>\n      <td>7459800876.00000</td>\n      <td>2</td>\n      <td>0</td>\n      <td>Armenia</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AO</td>\n      <td>3842638218.00000</td>\n      <td>2</td>\n      <td>0</td>\n      <td>Angola</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>125</th>\n      <td>UZ</td>\n      <td>66948148.00000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Uzbekistan</td>\n    </tr>\n    <tr>\n      <th>126</th>\n      <td>VM</td>\n      <td>67509765.00000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>VM</td>\n    </tr>\n    <tr>\n      <th>127</th>\n      <td>VN</td>\n      <td>22144692164.00000</td>\n      <td>9</td>\n      <td>2</td>\n      <td>Vietnam</td>\n    </tr>\n    <tr>\n      <th>128</th>\n      <td>XK</td>\n      <td>4838155523.00000</td>\n      <td>16</td>\n      <td>8</td>\n      <td>Kosovo</td>\n    </tr>\n    <tr>\n      <th>129</th>\n      <td>ZA</td>\n      <td>27292960529.00000</td>\n      <td>16</td>\n      <td>1</td>\n      <td>South Africa</td>\n    </tr>\n  </tbody>\n</table>\n<p>130 rows Ã 5 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### 1.5. Let's make our fourth API call\n#### Let's fetch information on the parameters included in the database","metadata":{}},{"cell_type":"code","source":"parameters = api.parameters(df=True)\n\nparameters","metadata":{"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"       id   name                                        description  \\\n0       1   pm10  Particulate matter less than 10 micrometers in...   \n1       2   pm25  Particulate matter less than 2.5 micrometers i...   \n2       3     o3                           Ozone mass concentration   \n3       4     co                 Carbon Monoxide mass concentration   \n4       5    no2                Nitrogen Dioxide mass concentration   \n5       6    so2                  Sulfur Dioxide mass concentration   \n6       7    no2                     Nitrogen Dioxide concentration   \n7       8     co                      Carbon Monoxide concentration   \n8       9    so2                       Sulfur Dioxide concentration   \n9      10     o3                                Ozone concentration   \n10     11     bc                    Black Carbon mass concentration   \n11     19    pm1  Particulate matter less than 1 micrometer in d...   \n12     21    co2                       Carbon Dioxide concentration   \n13     27    nox                 Nitrogen Oxides mass concentration   \n14     28    ch4                              Methane concentration   \n15     33    ufp            Ultrafine Particles count concentration   \n16     35     no                    Nitrogen Monoxide concentration   \n17    126  um010                                          PM1 count   \n18    130  um025                                        PM2.5 count   \n19    135  um100                                         PM10 count   \n20  19840    nox                      Nitrogen Oxides concentration   \n21  19843     no               Nitrogen Monoxide mass concentration   \n\n    preferredUnit  \n0           Âµg/mÂ³  \n1           Âµg/mÂ³  \n2           Âµg/mÂ³  \n3           Âµg/mÂ³  \n4           Âµg/mÂ³  \n5           Âµg/mÂ³  \n6             ppm  \n7             ppm  \n8             ppm  \n9             ppm  \n10          Âµg/mÂ³  \n11          Âµg/mÂ³  \n12            ppm  \n13          Âµg/mÂ³  \n14            ppm  \n15  particles/cmÂ³  \n16            ppm  \n17  particles/cmÂ³  \n18  particles/cmÂ³  \n19  particles/cmÂ³  \n20            ppm  \n21          Âµg/mÂ³  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>name</th>\n      <th>description</th>\n      <th>preferredUnit</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>pm10</td>\n      <td>Particulate matter less than 10 micrometers in...</td>\n      <td>Âµg/mÂ³</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>pm25</td>\n      <td>Particulate matter less than 2.5 micrometers i...</td>\n      <td>Âµg/mÂ³</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>o3</td>\n      <td>Ozone mass concentration</td>\n      <td>Âµg/mÂ³</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>co</td>\n      <td>Carbon Monoxide mass concentration</td>\n      <td>Âµg/mÂ³</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>no2</td>\n      <td>Nitrogen Dioxide mass concentration</td>\n      <td>Âµg/mÂ³</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>so2</td>\n      <td>Sulfur Dioxide mass concentration</td>\n      <td>Âµg/mÂ³</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>no2</td>\n      <td>Nitrogen Dioxide concentration</td>\n      <td>ppm</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>co</td>\n      <td>Carbon Monoxide concentration</td>\n      <td>ppm</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>so2</td>\n      <td>Sulfur Dioxide concentration</td>\n      <td>ppm</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>o3</td>\n      <td>Ozone concentration</td>\n      <td>ppm</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>11</td>\n      <td>bc</td>\n      <td>Black Carbon mass concentration</td>\n      <td>Âµg/mÂ³</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>19</td>\n      <td>pm1</td>\n      <td>Particulate matter less than 1 micrometer in d...</td>\n      <td>Âµg/mÂ³</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>21</td>\n      <td>co2</td>\n      <td>Carbon Dioxide concentration</td>\n      <td>ppm</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>27</td>\n      <td>nox</td>\n      <td>Nitrogen Oxides mass concentration</td>\n      <td>Âµg/mÂ³</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>28</td>\n      <td>ch4</td>\n      <td>Methane concentration</td>\n      <td>ppm</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>33</td>\n      <td>ufp</td>\n      <td>Ultrafine Particles count concentration</td>\n      <td>particles/cmÂ³</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>35</td>\n      <td>no</td>\n      <td>Nitrogen Monoxide concentration</td>\n      <td>ppm</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>126</td>\n      <td>um010</td>\n      <td>PM1 count</td>\n      <td>particles/cmÂ³</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>130</td>\n      <td>um025</td>\n      <td>PM2.5 count</td>\n      <td>particles/cmÂ³</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>135</td>\n      <td>um100</td>\n      <td>PM10 count</td>\n      <td>particles/cmÂ³</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>19840</td>\n      <td>nox</td>\n      <td>Nitrogen Oxides concentration</td>\n      <td>ppm</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>19843</td>\n      <td>no</td>\n      <td>Nitrogen Monoxide mass concentration</td>\n      <td>Âµg/mÂ³</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 1.6. Let's make our fifth API call\n#### Let's fetch information about the locations","metadata":{}},{"cell_type":"code","source":"locations = api.locations(df=True)\n\nlocations.head(3)","metadata":{"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"     id country   city   cities                       location  \\\n0  5541      IN  Delhi  [Delhi]   Burari Crossing, Delhi - IMD   \n1  5570      IN  Delhi  [Delhi]         Aya Nagar, Delhi - IMD   \n2  5610      IN  Delhi  [Delhi]  North Campus, DU, Delhi - IMD   \n\n                                           locations sourceName  \\\n0  [Burari Crossing, Delhi - IMD, Burari Crossing...      caaqm   \n1  [Aya Nagar, Delhi - IMD, Aya Nagar, New Delhi ...      caaqm   \n2  [North Campus, DU, Delhi - IMD, North Campus, ...      caaqm   \n\n            sourceNames  sourceType   sourceTypes              firstUpdated  \\\n0  [caaqm, data.gov.in]  government  [government] 2018-03-09 05:30:00+00:00   \n1  [caaqm, data.gov.in]  government  [government] 2018-03-09 05:30:00+00:00   \n2  [caaqm, data.gov.in]  government  [government] 2018-03-09 05:30:00+00:00   \n\n                lastUpdated                 parameters  \\\n0 2021-11-29 10:45:00+00:00  [pm25, co, pm10, o3, no2]   \n1 2021-11-29 10:45:00+00:00  [pm25, co, no2, o3, pm10]   \n2 2021-11-29 10:45:00+00:00  [pm25, co, no2, pm10, o3]   \n\n                                 countsByMeasurement   count  \\\n0  [{'parameter': 'pm25', 'count': 35793}, {'para...  208833   \n1  [{'parameter': 'pm25', 'count': 99231}, {'para...  511049   \n2  [{'parameter': 'pm25', 'count': 101055}, {'par...  505632   \n\n   coordinates.latitude  coordinates.longitude  \n0              28.72565               77.20116  \n1              28.47069               77.10994  \n2              28.65738               77.15854  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>country</th>\n      <th>city</th>\n      <th>cities</th>\n      <th>location</th>\n      <th>locations</th>\n      <th>sourceName</th>\n      <th>sourceNames</th>\n      <th>sourceType</th>\n      <th>sourceTypes</th>\n      <th>firstUpdated</th>\n      <th>lastUpdated</th>\n      <th>parameters</th>\n      <th>countsByMeasurement</th>\n      <th>count</th>\n      <th>coordinates.latitude</th>\n      <th>coordinates.longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5541</td>\n      <td>IN</td>\n      <td>Delhi</td>\n      <td>[Delhi]</td>\n      <td>Burari Crossing, Delhi - IMD</td>\n      <td>[Burari Crossing, Delhi - IMD, Burari Crossing...</td>\n      <td>caaqm</td>\n      <td>[caaqm, data.gov.in]</td>\n      <td>government</td>\n      <td>[government]</td>\n      <td>2018-03-09 05:30:00+00:00</td>\n      <td>2021-11-29 10:45:00+00:00</td>\n      <td>[pm25, co, pm10, o3, no2]</td>\n      <td>[{'parameter': 'pm25', 'count': 35793}, {'para...</td>\n      <td>208833</td>\n      <td>28.72565</td>\n      <td>77.20116</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5570</td>\n      <td>IN</td>\n      <td>Delhi</td>\n      <td>[Delhi]</td>\n      <td>Aya Nagar, Delhi - IMD</td>\n      <td>[Aya Nagar, Delhi - IMD, Aya Nagar, New Delhi ...</td>\n      <td>caaqm</td>\n      <td>[caaqm, data.gov.in]</td>\n      <td>government</td>\n      <td>[government]</td>\n      <td>2018-03-09 05:30:00+00:00</td>\n      <td>2021-11-29 10:45:00+00:00</td>\n      <td>[pm25, co, no2, o3, pm10]</td>\n      <td>[{'parameter': 'pm25', 'count': 99231}, {'para...</td>\n      <td>511049</td>\n      <td>28.47069</td>\n      <td>77.10994</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5610</td>\n      <td>IN</td>\n      <td>Delhi</td>\n      <td>[Delhi]</td>\n      <td>North Campus, DU, Delhi - IMD</td>\n      <td>[North Campus, DU, Delhi - IMD, North Campus, ...</td>\n      <td>caaqm</td>\n      <td>[caaqm, data.gov.in]</td>\n      <td>government</td>\n      <td>[government]</td>\n      <td>2018-03-09 05:30:00+00:00</td>\n      <td>2021-11-29 10:45:00+00:00</td>\n      <td>[pm25, co, no2, pm10, o3]</td>\n      <td>[{'parameter': 'pm25', 'count': 101055}, {'par...</td>\n      <td>505632</td>\n      <td>28.65738</td>\n      <td>77.15854</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### 1.6. Let's make our sixth API call\n#### Let's fetch data from the city of London","metadata":{}},{"cell_type":"code","source":"London = api.measurements(city='London', limit=10000, df=True)","metadata":{"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"London","metadata":{"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"                                         location parameter    value  \\\ndate.local                                                             \n2021-11-29 10:00:00    Southwark A2 Old Kent Road      pm10 15.00000   \n2021-11-29 10:00:00             London Harlington      pm10  9.00000   \n2021-11-29 10:00:00        London Marylebone Road      pm25 10.00000   \n2021-11-29 10:00:00  London Teddington Bushy Park      pm10 10.00000   \n2021-11-29 10:00:00        London Marylebone Road       so2 11.00000   \n...                                           ...       ...      ...   \n2021-11-17 13:00:00               Southend-on-Sea       no2 12.00000   \n2021-11-17 13:00:00  London Teddington Bushy Park      pm25  9.00000   \n2021-11-17 13:00:00        London Marylebone Road      pm25 14.00000   \n2021-11-17 13:00:00             London Hillingdon       no2  6.00000   \n2021-11-17 13:00:00        London Marylebone Road      pm10 20.00000   \n\n                                       unit country    city  \\\ndate.local                                                    \n2021-11-29 10:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-29 10:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-29 10:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-29 10:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-29 10:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n...                                     ...     ...     ...   \n2021-11-17 13:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-17 13:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-17 13:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-17 13:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-17 13:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n\n                                     date.utc  coordinates.latitude  \\\ndate.local                                                            \n2021-11-29 10:00:00 2021-11-29 10:00:00+00:00              51.48050   \n2021-11-29 10:00:00 2021-11-29 10:00:00+00:00              51.48879   \n2021-11-29 10:00:00 2021-11-29 10:00:00+00:00              51.52253   \n2021-11-29 10:00:00 2021-11-29 10:00:00+00:00              51.42529   \n2021-11-29 10:00:00 2021-11-29 10:00:00+00:00              51.52253   \n...                                       ...                   ...   \n2021-11-17 13:00:00 2021-11-17 13:00:00+00:00              51.54421   \n2021-11-17 13:00:00 2021-11-17 13:00:00+00:00              51.42529   \n2021-11-17 13:00:00 2021-11-17 13:00:00+00:00              51.52253   \n2021-11-17 13:00:00 2021-11-17 13:00:00+00:00              51.49633   \n2021-11-17 13:00:00 2021-11-17 13:00:00+00:00              51.52253   \n\n                     coordinates.longitude  \ndate.local                                  \n2021-11-29 10:00:00               -0.05955  \n2021-11-29 10:00:00               -0.44161  \n2021-11-29 10:00:00               -0.15461  \n2021-11-29 10:00:00               -0.34561  \n2021-11-29 10:00:00               -0.15461  \n...                                    ...  \n2021-11-17 13:00:00                0.67841  \n2021-11-17 13:00:00               -0.34561  \n2021-11-17 13:00:00               -0.15461  \n2021-11-17 13:00:00               -0.46086  \n2021-11-17 13:00:00               -0.15461  \n\n[10000 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>parameter</th>\n      <th>value</th>\n      <th>unit</th>\n      <th>country</th>\n      <th>city</th>\n      <th>date.utc</th>\n      <th>coordinates.latitude</th>\n      <th>coordinates.longitude</th>\n    </tr>\n    <tr>\n      <th>date.local</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2021-11-29 10:00:00</th>\n      <td>Southwark A2 Old Kent Road</td>\n      <td>pm10</td>\n      <td>15.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-29 10:00:00+00:00</td>\n      <td>51.48050</td>\n      <td>-0.05955</td>\n    </tr>\n    <tr>\n      <th>2021-11-29 10:00:00</th>\n      <td>London Harlington</td>\n      <td>pm10</td>\n      <td>9.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-29 10:00:00+00:00</td>\n      <td>51.48879</td>\n      <td>-0.44161</td>\n    </tr>\n    <tr>\n      <th>2021-11-29 10:00:00</th>\n      <td>London Marylebone Road</td>\n      <td>pm25</td>\n      <td>10.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-29 10:00:00+00:00</td>\n      <td>51.52253</td>\n      <td>-0.15461</td>\n    </tr>\n    <tr>\n      <th>2021-11-29 10:00:00</th>\n      <td>London Teddington Bushy Park</td>\n      <td>pm10</td>\n      <td>10.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-29 10:00:00+00:00</td>\n      <td>51.42529</td>\n      <td>-0.34561</td>\n    </tr>\n    <tr>\n      <th>2021-11-29 10:00:00</th>\n      <td>London Marylebone Road</td>\n      <td>so2</td>\n      <td>11.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-29 10:00:00+00:00</td>\n      <td>51.52253</td>\n      <td>-0.15461</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2021-11-17 13:00:00</th>\n      <td>Southend-on-Sea</td>\n      <td>no2</td>\n      <td>12.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-17 13:00:00+00:00</td>\n      <td>51.54421</td>\n      <td>0.67841</td>\n    </tr>\n    <tr>\n      <th>2021-11-17 13:00:00</th>\n      <td>London Teddington Bushy Park</td>\n      <td>pm25</td>\n      <td>9.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-17 13:00:00+00:00</td>\n      <td>51.42529</td>\n      <td>-0.34561</td>\n    </tr>\n    <tr>\n      <th>2021-11-17 13:00:00</th>\n      <td>London Marylebone Road</td>\n      <td>pm25</td>\n      <td>14.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-17 13:00:00+00:00</td>\n      <td>51.52253</td>\n      <td>-0.15461</td>\n    </tr>\n    <tr>\n      <th>2021-11-17 13:00:00</th>\n      <td>London Hillingdon</td>\n      <td>no2</td>\n      <td>6.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-17 13:00:00+00:00</td>\n      <td>51.49633</td>\n      <td>-0.46086</td>\n    </tr>\n    <tr>\n      <th>2021-11-17 13:00:00</th>\n      <td>London Marylebone Road</td>\n      <td>pm10</td>\n      <td>20.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-17 13:00:00+00:00</td>\n      <td>51.52253</td>\n      <td>-0.15461</td>\n    </tr>\n  </tbody>\n</table>\n<p>10000 rows Ã 9 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 2. Analysis of air quality in Berlin, London, Madrid, Beijing and Washington\n\n### Let's assume that we are part of a team of analysts interested in benchmarking efforts to mitigate air pollution in several cities.\n### Prior to any analysis we need to gather relevant data and have it transformed to the right format for subsequent processing.","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2.1. Let's gather data from Berlin, London, Madrid, Beijing and Washington","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Berlin = api.measurements(city='Berlin',country='DE', limit=10000, df=True)\nBerlin.sample(5)","metadata":{"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"                    location parameter    value                    unit  \\\ndate.local                                                                \n2021-10-17 03:00:00  DEBE032       no2  4.25000  b'\\xc2\\xb5g/m\\xc2\\xb3'   \n2021-10-23 02:00:00  DEBE065      pm25  5.57000  b'\\xc2\\xb5g/m\\xc2\\xb3'   \n2021-09-28 03:00:00  DEBE065        o3 15.45000  b'\\xc2\\xb5g/m\\xc2\\xb3'   \n2021-11-13 02:00:00  DEBE032      pm10 31.39000  b'\\xc2\\xb5g/m\\xc2\\xb3'   \n2021-10-16 04:00:00  DEBE062       no2  3.76000  b'\\xc2\\xb5g/m\\xc2\\xb3'   \n\n                    country    city                  date.utc  \\\ndate.local                                                      \n2021-10-17 03:00:00      DE  Berlin 2021-10-17 01:00:00+00:00   \n2021-10-23 02:00:00      DE  Berlin 2021-10-23 00:00:00+00:00   \n2021-09-28 03:00:00      DE  Berlin 2021-09-28 01:00:00+00:00   \n2021-11-13 02:00:00      DE  Berlin 2021-11-13 01:00:00+00:00   \n2021-10-16 04:00:00      DE  Berlin 2021-10-16 02:00:00+00:00   \n\n                     coordinates.latitude  coordinates.longitude  \ndate.local                                                        \n2021-10-17 03:00:00              52.47319               13.22514  \n2021-10-23 02:00:00              52.51407               13.46993  \n2021-09-28 03:00:00              52.51407               13.46993  \n2021-11-13 02:00:00              52.47319               13.22514  \n2021-10-16 04:00:00              52.65327               13.29608  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>parameter</th>\n      <th>value</th>\n      <th>unit</th>\n      <th>country</th>\n      <th>city</th>\n      <th>date.utc</th>\n      <th>coordinates.latitude</th>\n      <th>coordinates.longitude</th>\n    </tr>\n    <tr>\n      <th>date.local</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2021-10-17 03:00:00</th>\n      <td>DEBE032</td>\n      <td>no2</td>\n      <td>4.25000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>DE</td>\n      <td>Berlin</td>\n      <td>2021-10-17 01:00:00+00:00</td>\n      <td>52.47319</td>\n      <td>13.22514</td>\n    </tr>\n    <tr>\n      <th>2021-10-23 02:00:00</th>\n      <td>DEBE065</td>\n      <td>pm25</td>\n      <td>5.57000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>DE</td>\n      <td>Berlin</td>\n      <td>2021-10-23 00:00:00+00:00</td>\n      <td>52.51407</td>\n      <td>13.46993</td>\n    </tr>\n    <tr>\n      <th>2021-09-28 03:00:00</th>\n      <td>DEBE065</td>\n      <td>o3</td>\n      <td>15.45000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>DE</td>\n      <td>Berlin</td>\n      <td>2021-09-28 01:00:00+00:00</td>\n      <td>52.51407</td>\n      <td>13.46993</td>\n    </tr>\n    <tr>\n      <th>2021-11-13 02:00:00</th>\n      <td>DEBE032</td>\n      <td>pm10</td>\n      <td>31.39000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>DE</td>\n      <td>Berlin</td>\n      <td>2021-11-13 01:00:00+00:00</td>\n      <td>52.47319</td>\n      <td>13.22514</td>\n    </tr>\n    <tr>\n      <th>2021-10-16 04:00:00</th>\n      <td>DEBE062</td>\n      <td>no2</td>\n      <td>3.76000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>DE</td>\n      <td>Berlin</td>\n      <td>2021-10-16 02:00:00+00:00</td>\n      <td>52.65327</td>\n      <td>13.29608</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"London = api.measurements(city='London',country='GB', limit=10000, df=True)\nLondon.sample(5)","metadata":{"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"                                         location parameter    value  \\\ndate.local                                                             \n2021-11-21 06:00:00          London N. Kensington        co  0.00000   \n2021-11-17 20:00:00          London N. Kensington       no2 67.00000   \n2021-11-20 04:00:00            London Westminster       no2  8.00000   \n2021-11-27 08:00:00                 London Eltham       no2  6.00000   \n2021-11-22 04:00:00  London Teddington Bushy Park      pm25  4.00000   \n\n                                       unit country    city  \\\ndate.local                                                    \n2021-11-21 06:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-17 20:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-20 04:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-27 08:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-22 04:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n\n                                     date.utc  coordinates.latitude  \\\ndate.local                                                            \n2021-11-21 06:00:00 2021-11-21 06:00:00+00:00              51.52105   \n2021-11-17 20:00:00 2021-11-17 20:00:00+00:00              51.52105   \n2021-11-20 04:00:00 2021-11-20 04:00:00+00:00              51.49467   \n2021-11-27 08:00:00 2021-11-27 08:00:00+00:00              51.45258   \n2021-11-22 04:00:00 2021-11-22 04:00:00+00:00              51.42529   \n\n                     coordinates.longitude  \ndate.local                                  \n2021-11-21 06:00:00               -0.21349  \n2021-11-17 20:00:00               -0.21349  \n2021-11-20 04:00:00               -0.13193  \n2021-11-27 08:00:00                0.07077  \n2021-11-22 04:00:00               -0.34561  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>parameter</th>\n      <th>value</th>\n      <th>unit</th>\n      <th>country</th>\n      <th>city</th>\n      <th>date.utc</th>\n      <th>coordinates.latitude</th>\n      <th>coordinates.longitude</th>\n    </tr>\n    <tr>\n      <th>date.local</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2021-11-21 06:00:00</th>\n      <td>London N. Kensington</td>\n      <td>co</td>\n      <td>0.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-21 06:00:00+00:00</td>\n      <td>51.52105</td>\n      <td>-0.21349</td>\n    </tr>\n    <tr>\n      <th>2021-11-17 20:00:00</th>\n      <td>London N. Kensington</td>\n      <td>no2</td>\n      <td>67.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-17 20:00:00+00:00</td>\n      <td>51.52105</td>\n      <td>-0.21349</td>\n    </tr>\n    <tr>\n      <th>2021-11-20 04:00:00</th>\n      <td>London Westminster</td>\n      <td>no2</td>\n      <td>8.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-20 04:00:00+00:00</td>\n      <td>51.49467</td>\n      <td>-0.13193</td>\n    </tr>\n    <tr>\n      <th>2021-11-27 08:00:00</th>\n      <td>London Eltham</td>\n      <td>no2</td>\n      <td>6.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-27 08:00:00+00:00</td>\n      <td>51.45258</td>\n      <td>0.07077</td>\n    </tr>\n    <tr>\n      <th>2021-11-22 04:00:00</th>\n      <td>London Teddington Bushy Park</td>\n      <td>pm25</td>\n      <td>4.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-22 04:00:00+00:00</td>\n      <td>51.42529</td>\n      <td>-0.34561</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"Madrid=api.measurements(city='Madrid',country='ES',limit=10000, df=True)\nMadrid.sample(5)","metadata":{"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"                    location parameter     value                    unit  \\\ndate.local                                                                 \n2021-11-26 18:00:00  ES1422A        co 500.00000  b'\\xc2\\xb5g/m\\xc2\\xb3'   \n2021-11-25 23:00:00  ES1752A      pm10   4.00000  b'\\xc2\\xb5g/m\\xc2\\xb3'   \n2021-11-28 07:00:00  ES1802A       no2   1.00000  b'\\xc2\\xb5g/m\\xc2\\xb3'   \n2021-11-25 22:00:00  ES1565A        o3   2.00000  b'\\xc2\\xb5g/m\\xc2\\xb3'   \n2021-11-28 03:00:00  ES1612A       no2   5.00000  b'\\xc2\\xb5g/m\\xc2\\xb3'   \n\n                    country    city                  date.utc  \\\ndate.local                                                      \n2021-11-26 18:00:00      ES  Madrid 2021-11-26 19:00:00+00:00   \n2021-11-25 23:00:00      ES  Madrid 2021-11-26 00:00:00+00:00   \n2021-11-28 07:00:00      ES  Madrid 2021-11-28 06:00:00+00:00   \n2021-11-25 22:00:00      ES  Madrid 2021-11-25 23:00:00+00:00   \n2021-11-28 03:00:00      ES  Madrid 2021-11-28 04:00:00+00:00   \n\n                     coordinates.latitude  coordinates.longitude  \ndate.local                                                        \n2021-11-26 18:00:00              40.41917               -3.70333  \n2021-11-25 23:00:00              40.45500               -3.48417  \n2021-11-28 07:00:00              40.91028               -3.46667  \n2021-11-25 22:00:00              40.28111               -3.80167  \n2021-11-28 03:00:00              40.44778               -3.86722  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>parameter</th>\n      <th>value</th>\n      <th>unit</th>\n      <th>country</th>\n      <th>city</th>\n      <th>date.utc</th>\n      <th>coordinates.latitude</th>\n      <th>coordinates.longitude</th>\n    </tr>\n    <tr>\n      <th>date.local</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2021-11-26 18:00:00</th>\n      <td>ES1422A</td>\n      <td>co</td>\n      <td>500.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>ES</td>\n      <td>Madrid</td>\n      <td>2021-11-26 19:00:00+00:00</td>\n      <td>40.41917</td>\n      <td>-3.70333</td>\n    </tr>\n    <tr>\n      <th>2021-11-25 23:00:00</th>\n      <td>ES1752A</td>\n      <td>pm10</td>\n      <td>4.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>ES</td>\n      <td>Madrid</td>\n      <td>2021-11-26 00:00:00+00:00</td>\n      <td>40.45500</td>\n      <td>-3.48417</td>\n    </tr>\n    <tr>\n      <th>2021-11-28 07:00:00</th>\n      <td>ES1802A</td>\n      <td>no2</td>\n      <td>1.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>ES</td>\n      <td>Madrid</td>\n      <td>2021-11-28 06:00:00+00:00</td>\n      <td>40.91028</td>\n      <td>-3.46667</td>\n    </tr>\n    <tr>\n      <th>2021-11-25 22:00:00</th>\n      <td>ES1565A</td>\n      <td>o3</td>\n      <td>2.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>ES</td>\n      <td>Madrid</td>\n      <td>2021-11-25 23:00:00+00:00</td>\n      <td>40.28111</td>\n      <td>-3.80167</td>\n    </tr>\n    <tr>\n      <th>2021-11-28 03:00:00</th>\n      <td>ES1612A</td>\n      <td>no2</td>\n      <td>5.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>ES</td>\n      <td>Madrid</td>\n      <td>2021-11-28 04:00:00+00:00</td>\n      <td>40.44778</td>\n      <td>-3.86722</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"Beijing = api.measurements(city='Beijing', limit=10000, df=True)\nBeijing.sample(5)","metadata":{"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"                               location parameter  value  \\\ndate.local                                                 \n2021-09-20 09:00:00  Beijing US Embassy      pm25      7   \n2020-11-27 12:00:00  Beijing US Embassy      pm25     18   \n2020-12-19 22:00:00  Beijing US Embassy      pm25     55   \n2020-10-30 02:00:00  Beijing US Embassy      pm25     70   \n2020-11-11 18:00:00  Beijing US Embassy      pm25    167   \n\n                                       unit country     city  \\\ndate.local                                                     \n2021-09-20 09:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      CN  Beijing   \n2020-11-27 12:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      CN  Beijing   \n2020-12-19 22:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      CN  Beijing   \n2020-10-30 02:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      CN  Beijing   \n2020-11-11 18:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      CN  Beijing   \n\n                                     date.utc  coordinates.latitude  \\\ndate.local                                                            \n2021-09-20 09:00:00 2021-09-20 01:00:00+00:00              39.95000   \n2020-11-27 12:00:00 2020-11-27 04:00:00+00:00              39.95000   \n2020-12-19 22:00:00 2020-12-19 14:00:00+00:00              39.95000   \n2020-10-30 02:00:00 2020-10-29 18:00:00+00:00              39.95000   \n2020-11-11 18:00:00 2020-11-11 10:00:00+00:00              39.95000   \n\n                     coordinates.longitude  \ndate.local                                  \n2021-09-20 09:00:00              116.47000  \n2020-11-27 12:00:00              116.47000  \n2020-12-19 22:00:00              116.47000  \n2020-10-30 02:00:00              116.47000  \n2020-11-11 18:00:00              116.47000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>parameter</th>\n      <th>value</th>\n      <th>unit</th>\n      <th>country</th>\n      <th>city</th>\n      <th>date.utc</th>\n      <th>coordinates.latitude</th>\n      <th>coordinates.longitude</th>\n    </tr>\n    <tr>\n      <th>date.local</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2021-09-20 09:00:00</th>\n      <td>Beijing US Embassy</td>\n      <td>pm25</td>\n      <td>7</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>CN</td>\n      <td>Beijing</td>\n      <td>2021-09-20 01:00:00+00:00</td>\n      <td>39.95000</td>\n      <td>116.47000</td>\n    </tr>\n    <tr>\n      <th>2020-11-27 12:00:00</th>\n      <td>Beijing US Embassy</td>\n      <td>pm25</td>\n      <td>18</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>CN</td>\n      <td>Beijing</td>\n      <td>2020-11-27 04:00:00+00:00</td>\n      <td>39.95000</td>\n      <td>116.47000</td>\n    </tr>\n    <tr>\n      <th>2020-12-19 22:00:00</th>\n      <td>Beijing US Embassy</td>\n      <td>pm25</td>\n      <td>55</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>CN</td>\n      <td>Beijing</td>\n      <td>2020-12-19 14:00:00+00:00</td>\n      <td>39.95000</td>\n      <td>116.47000</td>\n    </tr>\n    <tr>\n      <th>2020-10-30 02:00:00</th>\n      <td>Beijing US Embassy</td>\n      <td>pm25</td>\n      <td>70</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>CN</td>\n      <td>Beijing</td>\n      <td>2020-10-29 18:00:00+00:00</td>\n      <td>39.95000</td>\n      <td>116.47000</td>\n    </tr>\n    <tr>\n      <th>2020-11-11 18:00:00</th>\n      <td>Beijing US Embassy</td>\n      <td>pm25</td>\n      <td>167</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>CN</td>\n      <td>Beijing</td>\n      <td>2020-11-11 10:00:00+00:00</td>\n      <td>39.95000</td>\n      <td>116.47000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Washington=api.measurements(city='WASHINGTON', limit=10000, df=True)\nWashington.sample(5)","metadata":{"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"                      location parameter   value unit country        city  \\\ndate.local                                                                  \n2021-11-08 03:00:00  Mackville        o3 0.04500  ppm      US  WASHINGTON   \n2021-11-19 16:00:00      Copan        o3 0.03700  ppm      US  WASHINGTON   \n2021-11-22 08:00:00  TakomaRec       no2 0.02200  ppm      US  WASHINGTON   \n2021-11-11 18:00:00  Hurricane       no2 0.00600  ppm      US  WASHINGTON   \n2021-11-25 01:00:00  Hurricane        o3 0.03600  ppm      US  WASHINGTON   \n\n                                     date.utc  coordinates.latitude  \\\ndate.local                                                            \n2021-11-08 03:00:00 2021-11-08 08:00:00+00:00              37.70460   \n2021-11-19 16:00:00 2021-11-19 22:00:00+00:00              36.90812   \n2021-11-22 08:00:00 2021-11-22 13:00:00+00:00              38.97010   \n2021-11-11 18:00:00 2021-11-12 01:00:00+00:00              37.17900   \n2021-11-25 01:00:00 2021-11-25 08:00:00+00:00              37.17900   \n\n                     coordinates.longitude  \ndate.local                                  \n2021-11-08 03:00:00              -85.04850  \n2021-11-19 16:00:00              -95.88235  \n2021-11-22 08:00:00              -77.01672  \n2021-11-11 18:00:00             -113.30520  \n2021-11-25 01:00:00             -113.30520  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>parameter</th>\n      <th>value</th>\n      <th>unit</th>\n      <th>country</th>\n      <th>city</th>\n      <th>date.utc</th>\n      <th>coordinates.latitude</th>\n      <th>coordinates.longitude</th>\n    </tr>\n    <tr>\n      <th>date.local</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2021-11-08 03:00:00</th>\n      <td>Mackville</td>\n      <td>o3</td>\n      <td>0.04500</td>\n      <td>ppm</td>\n      <td>US</td>\n      <td>WASHINGTON</td>\n      <td>2021-11-08 08:00:00+00:00</td>\n      <td>37.70460</td>\n      <td>-85.04850</td>\n    </tr>\n    <tr>\n      <th>2021-11-19 16:00:00</th>\n      <td>Copan</td>\n      <td>o3</td>\n      <td>0.03700</td>\n      <td>ppm</td>\n      <td>US</td>\n      <td>WASHINGTON</td>\n      <td>2021-11-19 22:00:00+00:00</td>\n      <td>36.90812</td>\n      <td>-95.88235</td>\n    </tr>\n    <tr>\n      <th>2021-11-22 08:00:00</th>\n      <td>TakomaRec</td>\n      <td>no2</td>\n      <td>0.02200</td>\n      <td>ppm</td>\n      <td>US</td>\n      <td>WASHINGTON</td>\n      <td>2021-11-22 13:00:00+00:00</td>\n      <td>38.97010</td>\n      <td>-77.01672</td>\n    </tr>\n    <tr>\n      <th>2021-11-11 18:00:00</th>\n      <td>Hurricane</td>\n      <td>no2</td>\n      <td>0.00600</td>\n      <td>ppm</td>\n      <td>US</td>\n      <td>WASHINGTON</td>\n      <td>2021-11-12 01:00:00+00:00</td>\n      <td>37.17900</td>\n      <td>-113.30520</td>\n    </tr>\n    <tr>\n      <th>2021-11-25 01:00:00</th>\n      <td>Hurricane</td>\n      <td>o3</td>\n      <td>0.03600</td>\n      <td>ppm</td>\n      <td>US</td>\n      <td>WASHINGTON</td>\n      <td>2021-11-25 08:00:00+00:00</td>\n      <td>37.17900</td>\n      <td>-113.30520</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2.2 Let's combine the measurements of all the cities into a single dataframe\n#### the following figure provides a visual representation of the operation we want to perform\n<img src=\"https://pandas.pydata.org/pandas-docs/stable/_images/merging_concat_basic.png\">\n","metadata":{}},{"cell_type":"markdown","source":"#### We do this using a pandas method called concat\n\nhttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"AirQualityCities = pd.concat([Beijing,Berlin,London,Madrid,Washington], axis=0)","metadata":{"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"AirQualityCities.sample(3)","metadata":{"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"                               location parameter    value  \\\ndate.local                                                   \n2020-11-13 16:00:00  Beijing US Embassy      pm25 27.00000   \n2021-06-25 18:00:00  Beijing US Embassy      pm25 83.00000   \n2021-06-18 18:00:00  Beijing US Embassy      pm25  4.00000   \n\n                                       unit country     city  \\\ndate.local                                                     \n2020-11-13 16:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      CN  Beijing   \n2021-06-25 18:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      CN  Beijing   \n2021-06-18 18:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      CN  Beijing   \n\n                                     date.utc  coordinates.latitude  \\\ndate.local                                                            \n2020-11-13 16:00:00 2020-11-13 08:00:00+00:00              39.95000   \n2021-06-25 18:00:00 2021-06-25 10:00:00+00:00              39.95000   \n2021-06-18 18:00:00 2021-06-18 10:00:00+00:00              39.95000   \n\n                     coordinates.longitude  \ndate.local                                  \n2020-11-13 16:00:00              116.47000  \n2021-06-25 18:00:00              116.47000  \n2021-06-18 18:00:00              116.47000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>parameter</th>\n      <th>value</th>\n      <th>unit</th>\n      <th>country</th>\n      <th>city</th>\n      <th>date.utc</th>\n      <th>coordinates.latitude</th>\n      <th>coordinates.longitude</th>\n    </tr>\n    <tr>\n      <th>date.local</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2020-11-13 16:00:00</th>\n      <td>Beijing US Embassy</td>\n      <td>pm25</td>\n      <td>27.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>CN</td>\n      <td>Beijing</td>\n      <td>2020-11-13 08:00:00+00:00</td>\n      <td>39.95000</td>\n      <td>116.47000</td>\n    </tr>\n    <tr>\n      <th>2021-06-25 18:00:00</th>\n      <td>Beijing US Embassy</td>\n      <td>pm25</td>\n      <td>83.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>CN</td>\n      <td>Beijing</td>\n      <td>2021-06-25 10:00:00+00:00</td>\n      <td>39.95000</td>\n      <td>116.47000</td>\n    </tr>\n    <tr>\n      <th>2021-06-18 18:00:00</th>\n      <td>Beijing US Embassy</td>\n      <td>pm25</td>\n      <td>4.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>CN</td>\n      <td>Beijing</td>\n      <td>2021-06-18 10:00:00+00:00</td>\n      <td>39.95000</td>\n      <td>116.47000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"AirQualityCities.info()","metadata":{"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nDatetimeIndex: 50977 entries, 2021-11-29 19:00:00 to 2021-11-02 07:00:00\nData columns (total 9 columns):\n #   Column                 Non-Null Count  Dtype              \n---  ------                 --------------  -----              \n 0   location               50977 non-null  object             \n 1   parameter              50977 non-null  object             \n 2   value                  50977 non-null  float64            \n 3   unit                   50977 non-null  object             \n 4   country                50977 non-null  object             \n 5   city                   50977 non-null  object             \n 6   date.utc               50977 non-null  datetime64[ns, UTC]\n 7   coordinates.latitude   50977 non-null  float64            \n 8   coordinates.longitude  50977 non-null  float64            \ndtypes: datetime64[ns, UTC](1), float64(3), object(5)\nmemory usage: 3.9+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"### 2.3. First Analysis:How are cities doing in terms of CO pollution ??","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## We need to select CO observations\nAirQualityCitiesCO=AirQualityCities[AirQualityCities['parameter']=='co']","metadata":{"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"AirQualityCitiesCO.sample(10)","metadata":{"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"                                   location parameter      value  \\\ndate.local                                                         \n2021-11-20 08:00:00  London Marylebone Road        co 1100.00000   \n2021-11-28 23:00:00                 ES1422A        co  200.00000   \n2021-09-16 02:00:00                 DEBE061        co  180.00000   \n2021-11-04 03:00:00                 DEBE061        co  270.00000   \n2021-11-28 01:00:00                 ES1568A        co  300.00000   \n2021-11-22 11:00:00    London N. Kensington        co    0.00000   \n2021-11-19 04:00:00  London Marylebone Road        co 1200.00000   \n2021-11-24 03:00:00                 DEBE065        co  200.00000   \n2021-11-22 11:00:00  London Marylebone Road        co 1100.00000   \n2021-11-29 06:00:00    London N. Kensington        co    0.00000   \n\n                                       unit country    city  \\\ndate.local                                                    \n2021-11-20 08:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-28 23:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      ES  Madrid   \n2021-09-16 02:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      DE  Berlin   \n2021-11-04 03:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      DE  Berlin   \n2021-11-28 01:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      ES  Madrid   \n2021-11-22 11:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-19 04:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-24 03:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      DE  Berlin   \n2021-11-22 11:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n2021-11-29 06:00:00  b'\\xc2\\xb5g/m\\xc2\\xb3'      GB  London   \n\n                                     date.utc  coordinates.latitude  \\\ndate.local                                                            \n2021-11-20 08:00:00 2021-11-20 08:00:00+00:00              51.52253   \n2021-11-28 23:00:00 2021-11-29 00:00:00+00:00              40.41917   \n2021-09-16 02:00:00 2021-09-16 00:00:00+00:00              52.46361   \n2021-11-04 03:00:00 2021-11-04 02:00:00+00:00              52.46361   \n2021-11-28 01:00:00 2021-11-28 00:00:00+00:00              40.32417   \n2021-11-22 11:00:00 2021-11-22 11:00:00+00:00              51.52105   \n2021-11-19 04:00:00 2021-11-19 04:00:00+00:00              51.52253   \n2021-11-24 03:00:00 2021-11-24 02:00:00+00:00              52.51407   \n2021-11-22 11:00:00 2021-11-22 11:00:00+00:00              51.52253   \n2021-11-29 06:00:00 2021-11-29 06:00:00+00:00              51.52105   \n\n                     coordinates.longitude  \ndate.local                                  \n2021-11-20 08:00:00               -0.15461  \n2021-11-28 23:00:00               -3.70333  \n2021-09-16 02:00:00               13.31825  \n2021-11-04 03:00:00               13.31825  \n2021-11-28 01:00:00               -3.87639  \n2021-11-22 11:00:00               -0.21349  \n2021-11-19 04:00:00               -0.15461  \n2021-11-24 03:00:00               13.46993  \n2021-11-22 11:00:00               -0.15461  \n2021-11-29 06:00:00               -0.21349  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>parameter</th>\n      <th>value</th>\n      <th>unit</th>\n      <th>country</th>\n      <th>city</th>\n      <th>date.utc</th>\n      <th>coordinates.latitude</th>\n      <th>coordinates.longitude</th>\n    </tr>\n    <tr>\n      <th>date.local</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2021-11-20 08:00:00</th>\n      <td>London Marylebone Road</td>\n      <td>co</td>\n      <td>1100.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-20 08:00:00+00:00</td>\n      <td>51.52253</td>\n      <td>-0.15461</td>\n    </tr>\n    <tr>\n      <th>2021-11-28 23:00:00</th>\n      <td>ES1422A</td>\n      <td>co</td>\n      <td>200.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>ES</td>\n      <td>Madrid</td>\n      <td>2021-11-29 00:00:00+00:00</td>\n      <td>40.41917</td>\n      <td>-3.70333</td>\n    </tr>\n    <tr>\n      <th>2021-09-16 02:00:00</th>\n      <td>DEBE061</td>\n      <td>co</td>\n      <td>180.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>DE</td>\n      <td>Berlin</td>\n      <td>2021-09-16 00:00:00+00:00</td>\n      <td>52.46361</td>\n      <td>13.31825</td>\n    </tr>\n    <tr>\n      <th>2021-11-04 03:00:00</th>\n      <td>DEBE061</td>\n      <td>co</td>\n      <td>270.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>DE</td>\n      <td>Berlin</td>\n      <td>2021-11-04 02:00:00+00:00</td>\n      <td>52.46361</td>\n      <td>13.31825</td>\n    </tr>\n    <tr>\n      <th>2021-11-28 01:00:00</th>\n      <td>ES1568A</td>\n      <td>co</td>\n      <td>300.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>ES</td>\n      <td>Madrid</td>\n      <td>2021-11-28 00:00:00+00:00</td>\n      <td>40.32417</td>\n      <td>-3.87639</td>\n    </tr>\n    <tr>\n      <th>2021-11-22 11:00:00</th>\n      <td>London N. Kensington</td>\n      <td>co</td>\n      <td>0.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-22 11:00:00+00:00</td>\n      <td>51.52105</td>\n      <td>-0.21349</td>\n    </tr>\n    <tr>\n      <th>2021-11-19 04:00:00</th>\n      <td>London Marylebone Road</td>\n      <td>co</td>\n      <td>1200.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-19 04:00:00+00:00</td>\n      <td>51.52253</td>\n      <td>-0.15461</td>\n    </tr>\n    <tr>\n      <th>2021-11-24 03:00:00</th>\n      <td>DEBE065</td>\n      <td>co</td>\n      <td>200.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>DE</td>\n      <td>Berlin</td>\n      <td>2021-11-24 02:00:00+00:00</td>\n      <td>52.51407</td>\n      <td>13.46993</td>\n    </tr>\n    <tr>\n      <th>2021-11-22 11:00:00</th>\n      <td>London Marylebone Road</td>\n      <td>co</td>\n      <td>1100.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-22 11:00:00+00:00</td>\n      <td>51.52253</td>\n      <td>-0.15461</td>\n    </tr>\n    <tr>\n      <th>2021-11-29 06:00:00</th>\n      <td>London N. Kensington</td>\n      <td>co</td>\n      <td>0.00000</td>\n      <td>b'\\xc2\\xb5g/m\\xc2\\xb3'</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>2021-11-29 06:00:00+00:00</td>\n      <td>51.52105</td>\n      <td>-0.21349</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"sns.boxplot(\n    x='city',\n    y='value',\n    data=AirQualityCitiesCO,\n    fliersize=0,\n    palette='deep')","metadata":{"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7ff3eacf56d0>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2.4. Second Analysis:How are cities doing in terms of PM25 pollution ??","metadata":{}},{"cell_type":"code","source":"AirQualityCitiesPM25=AirQualityCities[AirQualityCities['parameter']=='pm25']","metadata":{"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"sns.boxplot(\n    x='city',\n    y='value',\n    data=AirQualityCitiesPM25,\n    fliersize=0,\n    palette='deep')","metadata":{"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7ff3e9f0df10>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"fig, ax = plt.subplots(1, figsize=(14,7))\n\nax = sns.boxplot(\n    x='city',\n    y='value',\n    data=AirQualityCitiesPM25,\n    fliersize=0,\n    palette='deep',\n    ax=ax)\n\nax.set_ylim([0, 200])\nax.set_ylabel(\"PM25\", fontsize=18)\nax.set_xlabel(\"city\")\n\nsns.despine(offset=10)\n\n\nplt.show()","metadata":{"trusted":true},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1008x504 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2.5. Third Analysis:How are cities doing in terms of PM10 pollution ??","metadata":{}},{"cell_type":"code","source":"AirQualityCitiesPM10=AirQualityCities[AirQualityCities['parameter']=='pm10']","metadata":{"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"sns.boxplot(\n    x='city',\n    y='value',\n    data=AirQualityCitiesPM10,\n    fliersize=0,\n    palette='deep')","metadata":{"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7ff3eab6cd10>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"fig, ax = plt.subplots(1, figsize=(14,7))\n\nax = sns.boxplot(\n    x='city',\n    y='value',\n    data=AirQualityCitiesPM10,\n    fliersize=0,\n    palette='deep',\n    ax=ax)\n\nax.set_ylim([0, 100])\nax.set_ylabel(\"PM10\", fontsize=18)\nax.set_xlabel(\"city\")\n\nsns.despine(offset=10)\n\n\nplt.show()","metadata":{"trusted":true},"execution_count":37,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1008x504 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}
